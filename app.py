import streamlit as st
import pandas as pd
import requests
import matplotlib.pyplot as plt
import seaborn as sns
import os
from sklearn.ensemble import RandomForestClassifier
import joblib
import numpy as np

st.set_page_config(page_title="Copilote IA - Analyse de ventes", layout="wide")

st.title("Copilote IA - Analyse de ventes augment√©e (‚òÖ IA + ML)")
st.write("Uploadez un fichier CSV et laissez l'IA r√©sumer les tendances pour vous, tout en b√©n√©ficiant d'une alerte intelligente gr√¢ce au machine learning \U0001f9ea")

uploaded_file = st.file_uploader("Uploader votre fichier de ventes (.csv)", type="csv")

api_key = os.getenv("GROQ_API_KEY")
if not api_key:
    st.error("‚ùå Cl√© API Groq manquante. Ajoutez-la dans les secrets Streamlit Cloud.")
    st.stop()

if uploaded_file:
    df = pd.read_csv(uploaded_file)
    st.subheader("üßæ Aper√ßu des donn√©es")
    # Aper√ßu d√©sactiv√© pour simplifier l'affichage
    # st.dataframe(df.head())

    # üé® Visualisation avec Seaborn
    st.subheader("üìä Visualisation des tendances")
    num_cols = df.select_dtypes(include='number').columns.tolist()
    if len(num_cols) >= 2:
        fig, ax = plt.subplots(figsize=(8, 4))
        sns.scatterplot(data=df, x=num_cols[0], y=num_cols[1], ax=ax, s=60, color='#1f77b4')
        ax.set_title(f"Relation entre {num_cols[0]} et {num_cols[1]}", fontsize=12)
        ax.tick_params(axis='x', rotation=45)
        st.pyplot(fig)
    else:
        st.info("Pas assez de colonnes num√©riques pour afficher une visualisation.")

    # üì¶ Extraction de features simples pour d√©tection de risque
    ca_total = df['ca'].sum() if 'ca' in df.columns else 0
    quantite_total = df['quantite'].sum() if 'quantite' in df.columns else 0
    nb_lignes = len(df)
    features = pd.DataFrame([[ca_total, quantite_total, nb_lignes]], columns=['ca_total', 'quantite_total', 'nb_lignes'])

    # üì• Chargement ou cr√©ation du fichier historique ML
    histo_path = "historique_ml.csv"
    if os.path.exists(histo_path):
        df_histo = pd.read_csv(histo_path)
    else:
        df_histo = pd.DataFrame(columns=['ca_total', 'quantite_total', 'nb_lignes', 'performance_risquee'])

    # üß† Entra√Ænement du mod√®le ML sur l'historique r√©el
    if not df_histo.empty:
        X = df_histo[['ca_total', 'quantite_total', 'nb_lignes']]
        y = df_histo['performance_risquee']
        model = RandomForestClassifier()
        model.fit(X, y)
        proba_risque = model.predict_proba(features)[0][1]
        st.subheader("üî¢ Pr√©diction machine learning :")
        st.warning(f"Risque estim√© de contre-performance : {int(proba_risque*100)} %")
    else:
        proba_risque = 0.0
        st.info("Pas encore assez d'historique pour pr√©dire un risque. Ajoutez plus de fichiers.")

    # üîÑ Ajout √† l'historique si l'utilisateur classe la perf
    st.subheader("üîÑ Ajouter cette analyse √† l'historique ?")
    label = st.radio("Cette performance vous semble-t-elle √† risque ?", ("Non", "Oui"))
    if st.button("Ajouter √† l'historique ML"):
        perf_risquee = 1 if label == "Oui" else 0
        nouvelle_ligne = pd.DataFrame([[ca_total, quantite_total, nb_lignes, perf_risquee]], columns=df_histo.columns)
        df_histo = pd.concat([df_histo, nouvelle_ligne], ignore_index=True)
        df_histo.to_csv(histo_path, index=False)
        st.success("Analyse ajout√©e √† l'historique. Le mod√®le s'am√©liorera au prochain chargement.")

    summary = df.describe(include='all').to_string()

    prompt = f"""
    Tu es un analyste senior sp√©cialis√© en performance commerciale et analyse de donn√©es.

    Voici un tableau de donn√©es de ventes issues d'une entreprise e-commerce. Tu dois faire une lecture critique de ces donn√©es comme si tu devais conseiller une direction g√©n√©rale.

    Note : le moteur de machine learning interne estime un risque de contre-performance √† {int(proba_risque*100)} %.

    Ta mission :
    1. Identifier les tendances significatives (hausse, baisse, saisonnalit√©, produits ou canaux qui se d√©marquent)
    2. D√©tecter les anomalies ou incoh√©rences (valeurs aberrantes, pics inhabituels, donn√©es manquantes)
    3. Mettre en √©vidence les leviers de croissance et les axes d'am√©lioration potentiels
    4. Proposer 3 recommandations **strat√©giques** et **actionnables**, en t'appuyant sur l‚Äôanalyse chiffr√©e

    Sois synth√©tique, professionnel et impactant. Utilise des formulations claires et orient√©es d√©cision.

    Voici les donn√©es :

    {summary}
    """

    with st.spinner("Analyse en cours avec llama3-70b-8192..."):
        headers = {
            "Authorization": f"Bearer {api_key}",
            "Content-Type": "application/json"
        }

        data = {
            "model": "llama3-70b-8192",
            "messages": [
                {"role": "system", "content": "Tu es un expert en data business."},
                {"role": "user", "content": prompt}
            ]
        }

        response = requests.post(
            "https://api.groq.com/openai/v1/chat/completions",
            headers=headers,
            json=data
        )

        if response.status_code == 200:
            result = response.json()["choices"][0]["message"]["content"]
            st.subheader("üìà R√©sum√© IA :")
            st.write(result)
        else:
            st.error("Erreur lors de l'appel √† l'API :")
            st.code(response.json())
